var gulp = require('gulp');
var header = require('gulp-header');
var clean = require('gulp-clean');
var gulpWebpack = require('webpack-stream');
var webpack = require('webpack');
var babel = require("gulp-babel");
var runSequence = require('gulp4-run-sequence');
var fs = require('fs');

var settings = require('./settings.json');
var shared = require('./shared.js');

gulp.task("clean", gulp.series(function () {
	return gulp.src(["bin/", "dist/"], { read: false })
		.pipe(clean());
}));


gulp.task("babel", gulp.series(function () {
	return babelFunc();
}));


function babelFunc() {
	return gulp.src("src/**/*")
		.pipe(babel({
			presets: ['es2015', 'stage-3']
		}))
		.pipe(gulp.dest("bin/"));
}


gulp.task("webpack", gulp.series(["babel"], function () {
	return webpackFunc();
}));


function webpackFunc() {
	return gulp.src('bin/JsBarcode.js')
		.pipe(gulpWebpack(
			{
				mode: "none",
				output: {
					filename: 'JsBarcode.all.js'
				}
			}
			, webpack))
		.pipe(gulp.dest("dist/"));
}


gulp.task("webpack-min", gulp.series(["babel"], function () {
	return webpackMin('all');
}));


function webpackMin(name, dest) {
	dest = dest || './';
	return gulp.src('bin/JsBarcode.js')
		.pipe(gulpWebpack(
			{
				mode: "production",
				output: {
					filename: shared.minifiedFilename(name)
				},
			}
			, webpack))
		.pipe(header(settings.banner, require(settings.baseDir + 'package.json')))
		.pipe(gulp.dest("dist/" + dest));
}


gulp.task("webpack-all", gulp.series(function (cb) {
	var barcodes = require('./barcode-building.json');

	// Move the real barcodes/index.js out of the way while compiling the indivi